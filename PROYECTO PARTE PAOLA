//------------------------LIBRERIAS-------------------------------
#include <stdio.h> //entrada y salida de datos
#include <stdlib.h> //gestion de memoria
#include <string.h>  //manipulacion de strings


//-----------------------ESTRUCTURAS------------------------------
//---------REGISTRO NIÑ@------------------

typedef struct ListaR ListaR;
typedef struct NodoR NodoR;

struct NodoR
{
  int identificacion;
  char nombre[50];
  char N_usuario[50];
  char lugar[50];
  char correo[50];
  char fecha_nacimiento[15];
  int edad;
  char necesidades_especiales[100];
  
	NodoR *siguiente;
	NodoR *anterior; 
};

struct ListaR
{
	NodoR *inicio;
	NodoR *final;
};



//---------REGISTRO AYUDANTE------------------
typedef struct ListaA ListaAyudante;
typedef struct NodoA NodoA;

struct NodoA
{
  int identificacion;
  char nombre[50];
  char puesto[50];
  char funcion[50];
  char fecha_inicio[15];
  
	NodoA *siguiente;
	NodoA *anterior; 
};

struct ListaA
{
	NodoA *inicio;
	NodoA *final;
};


//---REGISTRO DE JUGUETES, ARBOL BINARIO-------


struct node {
	int codigo;
    char nombre[50];
    char descripcion[100];
    char categoria[100];
    int rangoI;
    int rangoF;
    int costo_total;
	struct node *left, *right;
};


//---------REGISTRO DE COMPORTAMIENTO------------------

typedef struct ListaC ListaC;
typedef struct NodoC NodoC;

struct NodoC
{
  int IDnino;
  char nombrePadre[50];
  char nombreMadre[50];
  char Des_comportamiento[100];
  char fecha_Registro[15];
  char comportamiento[15];
  
	NodoC *siguiente;
	NodoC *anterior; 
};

struct ListaC
{
	NodoC *inicio;
	NodoC *final;
};

//                                       TODO SOBRE REGISTRO DE NIN@S
//-----------------------------------------------------------------------------------------------------------------

//CREACION DE LA LISTA DOBLE PARA REGISTRO DEL NIN@

ListaR *listaNueva(void)
{
	ListaR *L;
	L = (ListaR *) malloc(sizeof(ListaR));
	L->inicio = NULL;
	L->final = NULL;
	return L;
}

//CREACION DEL NODO PARA LISTA DOBLE REGISTRO DEL NIN@
NodoR* crearNodo(int identificacion, char nombre[],char N_usuario[], char lugar[], char correo[], char fecha_nacimiento[],int edad,char necesidades_especiales[])
{
	NodoR *nuevo;
	nuevo = (NodoR *) malloc(sizeof(NodoR));
	nuevo->anterior = NULL;
	nuevo->siguiente = NULL;
	
	nuevo->identificacion = identificacion;	
	strcpy(nuevo->nombre,nombre);
	strcpy(nuevo->N_usuario,N_usuario);
	strcpy(nuevo->lugar,lugar);
	strcpy(nuevo->correo,correo);
	strcpy(nuevo->fecha_nacimiento,fecha_nacimiento);
	nuevo->edad = edad;	
	strcpy(nuevo->necesidades_especiales,necesidades_especiales);
	
	return nuevo;
}

//INSERTAR DATOS EN LA LISTA DOBLE REGISTRO DEL NIN@

void insertarNino(ListaR *L, int identificacion, char nombre[],char N_usuario[], char lugar[], char correo[], char fecha_nacimiento[],int edad,char necesidades_especiales[])
{
	if(L->inicio == NULL) //Valida si la lista est? vac?a
	{
		//Inserta al inicio de la lista
		L->inicio = crearNodo(identificacion,nombre,N_usuario,lugar,correo,fecha_nacimiento,edad,necesidades_especiales);
		L->final = L->inicio;
		return;
	}
	
	//Inserta el dato al final de la lista, no necesita un ciclo porque tiene el puntero final
	L->final->siguiente = crearNodo(identificacion,nombre,N_usuario,lugar,correo,fecha_nacimiento,edad,necesidades_especiales);
	L->final->siguiente->anterior = L->final;
	L->final = L->final->siguiente;
}


//MOSTRAR LISTA DOBLE REGISTRO DEL NIN@
void mostrarListaIzqDer(const ListaR *L)
{
	NodoR *i;
	printf("____________________________________________________________________________\n");
	printf("LISTA DE REGISTROS DE NINOS Y NINAS: \n\n");
	for(i = L->inicio; i!= NULL; i = i->siguiente){
	
		printf("IDENTIFICACION: %d \n", i->identificacion);
		printf("NOMBRE: %s \n", i->nombre);
		printf("NOMBRE USUARIO: %s \n", i->N_usuario);
		printf("LUGAR DE RESIDENCIA: %s \n", i->lugar);
		printf("CORREO: %s \n", i->correo);
		printf("FECHA DE NACIMIENTO: %s \n", i->fecha_nacimiento);
		printf("EDAD: %d \n", i->edad);
		printf("NECESIDADES ESPECIALES: %s \n\n\n", i->necesidades_especiales);
		}
	printf("____________________________________________________________________________\n");
}


//ELIMINAR NIN@ DE LA LISTA DOBLE 

void eliminarNino(ListaR *L, int identificacion)
{
	NodoR *aux = L->inicio;
	
	//Valida si la lista esta vacia
	if(L->inicio == NULL)
	{
		printf("La lista esta vacia...\n");		
	}
	else
	{
//Si el nodo a eliminar esta al inicio de la lista
		if(L->inicio->identificacion == identificacion)
		{
		aux = L->inicio;
		printf("\n-----------------------------------------");
		printf("El nino con identificacion %d ha sido eliminado \n", aux->identificacion);
		printf("-----------------------------------------");
		
		if(L->inicio == L->final) //Verifica si la lista solo ten?a un nodo para actualizar el puntero final
		{
			L->inicio = NULL;
			L->final = NULL;
		}
		else{
			L->inicio = L->inicio->siguiente;
			L->inicio->anterior = NULL;	
		}		
		free(aux);

		}
	//-----------------------------	
		else 
		{
			while(aux != NULL)
			{
				if(aux->identificacion == identificacion){
					aux->anterior->siguiente = aux->siguiente;
					if(aux != L->final)
						aux->siguiente->anterior = aux->anterior;
					else if(aux == L->final) //Valida si era el ultimo nodo de la lista para actualizar el puntero final
						L->final = L->final->anterior;					
					break;
				}
				aux = aux->siguiente;					
			}
			
		
		if(aux != NULL)
		{
			printf("El nino con identificacion %d ha sido eliminado \n", aux->identificacion);
			free(aux);
		}
	}
}
}

//VERIFICAR NINO REPETIDO Y EXISTE

int repetir_nino(ListaR *L, int identificacion)
{
	NodoR *nAux = L->inicio;
	
	while(nAux != NULL)
	{
		if(nAux->identificacion == identificacion)
			return -1;
		nAux = nAux->siguiente;		
	}
	
}




// MODIFICAR INFORMACION DE LISTA DOBLE REGISTRO NINO

void ModificarNino(ListaR *L, int identificador, int opcion){

    NodoR *aux = L->inicio;
    int ok = 0;
	int resultado;
    char nuevolugar[50],nueva_nece[100],nuevo_usuario[50];

    while(aux != NULL && !ok)
        {   
            if(aux->identificacion == identificador)
            {ok = 1;
			break;
			}
            else
            {aux=aux->siguiente;}
        }    

    if(ok)
    {
        printf("\nEL NIÑ@ CON IDENTIFICADOR %d SI ESTA REGISTRADO \n\n", identificador);
        if (opcion == 1){
            printf("Digite el nuevo lugar de residencia \n\n");
            gets(nuevolugar);
            strcpy(aux->lugar,nuevolugar);
            
             printf("-----------------------------------------");
            printf("EL CAMBIO SE REALIZO CON EXITO \n\n");
            printf("NOMBRE:%s \n",aux->nombre);
            printf("IDENTIFICADOR :%d \n",aux->identificacion);
			printf("NUEVO LUGAR DE RESIDENCIA :%s \n",aux->	lugar);
			printf("-----------------------------------------");
			}
			
		else if (opcion == 2){
            printf("Digite las nuevas necesidades del niño o niña \n\n");
            gets(nueva_nece);
            strcpy(aux->necesidades_especiales,nueva_nece);
            
            printf("-----------------------------------------");
            printf("EL CAMBIO SE REALIZO CON EXITO \n\n");
            printf("NOMBRE:%s \n",aux->nombre);
            printf("IDENTIFICADOR :%d \n",aux->identificacion);
			printf("NUEVAS NECESIDADES ESPECIALES :%s \n",aux->necesidades_especiales);
			printf("-----------------------------------------");
			}
			
		else if (opcion == 3){
            printf("Digite el nuevo nombre de usuario \n\n");
            gets(nuevo_usuario);
            strcpy(aux->N_usuario,nuevo_usuario);
            
            printf("\n-----------------------------------------");
            printf("EL CAMBIO SE REALIZO CON EXITO \n\n");
			printf("NOMBRE:%s \n",aux->nombre);
            printf("IDENTIFICADOR :%d \n",aux->identificacion);
			printf("NUEVO NOMBRE DE USUARIO :%s \n",aux->N_usuario);
			printf("-----------------------------------------");
			}
   		 
   }
   
   else
   		 {printf("\nEL NIÑ@ CON IDENTIFICADOR %s NO ESTA REGISTRADO \n\n", identificador);}

}
//                                       TODO SOBRE COMPORTAMIENTO DEL NINO
//-----------------------------------------------------------------------------------------------------------------

//CREACION DE LA LISTA DOBLE PARA COMPORTAMIENTO

ListaC *listaNuevaComportamiento(void)
{
	ListaC *C;
	C = (ListaC *) malloc(sizeof(ListaC));
	C->inicio = NULL;
	C->final = NULL;
	return C;
}


//CREACION DEL NODO PARA LISTA DOBLE COMPORTAMIENTO
NodoC* crearNodoComportamiento( int IDnino,char nombrePadre[],char nombreMadre[],char Des_comportamiento[],char fecha_Registro[],char comportamiento[])
{
	NodoC *nuevo;
	nuevo = (NodoC *) malloc(sizeof(NodoC));
	nuevo->anterior = NULL;
	nuevo->siguiente = NULL;
	
	nuevo->IDnino = IDnino;	
	strcpy(nuevo->nombrePadre,nombrePadre);
	strcpy(nuevo->nombreMadre,nombreMadre);
	strcpy(nuevo->Des_comportamiento,Des_comportamiento);
	strcpy(nuevo->fecha_Registro,fecha_Registro);
	strcpy(nuevo->comportamiento,comportamiento);
	
	return nuevo;
}



//INSERTAR DATOS EN LA LISTA DOBLE COMPORTAMIENTO

void insertarNinoC(ListaC *C, int IDnino,char nombrePadre[],char nombreMadre[],char Des_comportamiento[],char fecha_Registro[],char comportamiento[])
{
	if(C->inicio == NULL) //Valida si la lista est? vac?a
	{
		//Inserta al inicio de la lista
		C->inicio = crearNodoComportamiento(IDnino,nombrePadre,nombreMadre,Des_comportamiento,fecha_Registro,comportamiento);
		C->final = C->inicio;
		return;
	}
	
	//Inserta el dato al final de la lista, no necesita un ciclo porque tiene el puntero final
	C->final->siguiente = crearNodoComportamiento(IDnino,nombrePadre,nombreMadre,Des_comportamiento,fecha_Registro,comportamiento);
	C->final->siguiente->anterior = C->final;
	C->final = C->final->siguiente;
}


//MOSTRAR LISTA DOBLE REGISTRO DEL NIN@
void mostrarListaComportamiento(const ListaC *C)
{
	NodoC *i;
	printf("____________________________________________________________________________\n");
	printf("LISTA DE COMPORTAMIENTOS DE NINOS Y NINAS: \n\n");
	for(i = C->inicio; i!= NULL; i = i->siguiente){
	
		printf("IDENTIFICACION DEL NINO: %d \n", i->IDnino);
		printf("NOMBRE DEL PADRE: %s \n", i->nombrePadre);
		printf("NOMBRE DE LA MADRE: %s \n", i->nombreMadre);
		printf("FECHA DE REGISTRO: %s \n", i->fecha_Registro);
		printf("DESCRIPCION DEL COMPORTAMIENTO: %s \n", i->Des_comportamiento);
		printf("COMPORTAMIENTO: %s \n\n\n", i->comportamiento);
		}
	printf("____________________________________________________________________________\n");
	printf("\n");
}



//                                       TODO SOBRE REGISTRO DE JUGUETES
//-----------------------------------------------------------------------------------------------------------------


//Referencias https://www.geeksforgeeks.org/binary-search-tree-set-2-delete/
// crear nodo ABB
struct node* newNode(char nombrex[],int codigox,char descripcionx[],char categoriax[], int rangoIx, int rangoFx, int costo_totalx)
{
	struct node* temp = (struct node*)malloc(sizeof(struct node));
	temp->codigo = codigox;
	strcpy(temp->nombre,nombrex);
	strcpy(temp->descripcion,descripcionx);
	strcpy(temp->categoria, categoriax);
    temp->rangoI = rangoIx; 
	temp->rangoF = rangoFx;
	temp->costo_total = costo_totalx;

	
	temp->left = temp->right = NULL;
	return temp;
}

// imprimir en orden ABB
void inorder(struct node* root)
{
	if (root != NULL) {
		inorder(root->left);
		printf("\n\nNOMBRE DEL JUGUETE %s\nCODIGO DEL JUGUETE JU%d\nDESCRIPCION %s\nCATEGORIA %s\nRANGO DE EDAD %d-%d\nCOSTO TOTAL JUGUETE %d",root->nombre,root->codigo,root->descripcion,root->categoria,root->rangoI,root->rangoF,root->costo_total);
		inorder(root->right);
	}
}

//insertar al ABB
struct node* insert(struct node* node,char nombrex[],int key,char descripcionx[],char categoriax[], int rangoIx, int rangoFx, int costo_totalx)
{
	/* si el arbol esta vacio, retorna el nodo*/
	if (node == NULL)
		return newNode(nombrex,key,descripcionx,categoriax, rangoIx,rangoFx,costo_totalx);

	//sino sigue buscando donde meterlo
	if (strcmp(nombrex,node->nombre) < 0)
		node->left = insert(node->left, nombrex,key,descripcionx,categoriax, rangoIx,rangoFx,costo_totalx);
	else
		node->right = insert(node->right,nombrex,key,descripcionx,categoriax, rangoIx,rangoFx,costo_totalx);

	return node;
}

/* Dada una búsqueda binaria no vacía del
árbol, devuelve el nodo
con el valor de clave mínimo encontrado en
este arból. Tenga en cuenta que el
no es necesario buscar en todo el árbol. */
struct node* minValueNode(struct node* node)
{
	struct node* current = node;

	/* bucle hacia abajo para encontrar la hoja más a la izquierda*/
	while (current && current->left != NULL)
		current = current->left;

	return current;
}

/* Dado un árbol de búsqueda binario
y una llave, esta función
elimina la clave y
devuelve la nueva raíz*/
struct node* deleteNode(struct node* root, char nombrex[])
{
	// caso base
	if (root == NULL)
		return root;

// Si la clave a eliminar
// es más pequeño que el de la raíz
// clave, luego se encuentra en el subárbol izquierdo
	if (strcmp(nombrex,root->nombre) < 0)
		root->left = deleteNode(root->left,nombrex);


// Si la clave a eliminar
// es mayor que la raíz
// clave, luego se encuentra en el subárbol derecho
	else if (strcmp(nombrex,root->nombre) > 0)
		root->right = deleteNode(root->right,nombrex);


// si la clave es la misma que la clave de root,
// entonces este es el nodo
// para ser eliminado
	else {
		// nodo con solo un hijo o sin hijo
		if (root->left == NULL) {
			struct node* temp = root->right;
			free(root);
			return temp;
		}
		else if (root->right == NULL) {
			struct node* temp = root->left;
			free(root);
			return temp;
		}


// nodo con dos hijos:
// Obtener el sucesor inorder
// (el más pequeño en el subárbol derecho)
		struct node* temp = minValueNode(root->right);

		
// Copiar el orden
// contenido del sucesor de este nodo
		strcpy(root->nombre, temp->nombre);

		//borrar el sucesor de este nodo
		root->right = deleteNode(root->right, temp->nombre);
	}
	return root;
}

BuscarJ(struct node* actual, char juguete[]){
	
while(actual != NULL){
	if(strcmp(juguete,actual->nombre)== 0){
		printf("ENCONTRADO!");
		printf("\n---------------------------------------------------------------");
		printf("\nNOMBRE DEL JUGUETE %s\nCODIGO DEL JUGUETE JU%d\nDESCRIPCION %s\nCATEGORIA %s\nRANGO DE EDAD %d-%d\nCOSTO TOTAL JUGUETE %d",actual->nombre,actual->codigo,actual->descripcion,actual->categoria,actual->rangoI,actual->rangoF,actual->costo_total);
		printf("\n---------------------------------------------------------------");
		break;}
		
	else if(strcmp(juguete, actual->nombre)> 0) actual = actual->left; 
    else if(strcmp(juguete, actual->nombre)< 0) actual = actual->right;
}
}

//MODIFICAR DATOS JUGUETE
modificarJuguete(struct node* actual, char juguete[],char opcion[]){
	
   char descripcion [100];
   int edad_minima;
   int edad_maxima;
   int costo;
   int bandera;

   while(actual != NULL){

		if(strcmp(juguete,actual->nombre)== 0){
			printf("\n\nINFORMACION\n-----------------------------------------------");
			printf("\nNOMBRE DEL JUGUETE %s\nDESCRIPCION %s\nRANGO DE EDAD %d-%d\nCOSTO TOTAL JUGUETE %d",actual->nombre,actual->descripcion,actual->rangoI,actual->rangoF,actual->costo_total);
      		printf("\n-----------------------------------------------"); 

			if (strcmp(opcion,"1")==0)
			{
				printf("\nNueva descripcion:");
				fflush (stdin);
				gets (descripcion);
				strcpy(actual->descripcion,descripcion);
				bandera = 1;
				break;
				
			}

			else if (strcmp(opcion,"2")==0)
			{
				printf("\nRango de edad:");
				printf("\nEdad minima: ");
				scanf("%d", &edad_minima);
				printf("\nEdad maxima: ");
				scanf("%d", &edad_maxima);
				actual-> rangoI = edad_minima;
				actual-> rangoF = edad_maxima;
				bandera = 1;
				break;
			}
			else if (strcmp(opcion,"3")==0)
			{
				printf("\nNuevo costo de fabricación:");
				scanf("%d", &costo);
				actual ->costo_total = costo;
				bandera = 1;
				break;
			}
			else
			{
				printf("\nERROR: la funcion no existe, la accion no se pudo realizar con exito.");
			}
		
	  }
	   
      else if(strcmp(juguete, actual->nombre)> 0) actual = actual->left; 
      else if(strcmp(juguete, actual->nombre)< 0) actual = actual->right;
	}

	if (bandera ==1){
   			printf("\n--- MODIFICADO!! ---\n");
   			printf("\n-----------------------------------------------");
			printf("\nNOMBRE DEL JUGUETE %s\nDESCRIPCION %s\nRANGO DE EDAD %d-%d\nCOSTO TOTAL JUGUETE %d",actual->nombre,actual->descripcion,actual->rangoI,actual->rangoF,actual->costo_total);
      		printf("\n-----------------------------------------------");
		} 
		
	else{
		printf("\n--- ERROR, EL NODO NO EXISTE ---\n");
	}
}
	



//                                       PRINCIPAL
//-----------------------------------------------------------------------------------------------------------------

int main(void)
{
	ListaR *L;
	L = listaNueva();
	
	ListaC *C;
	C = listaNuevaComportamiento();
	
	struct node* root = NULL;
	root = insert(root,"Barbie",50,"rosada","muneca",3,12,10000);
	root = insert(root,"Peluche",20,"osito","felpa",3,12,1230);
	root = insert(root,"Bicicleta",30,"roja","aire libre",3,18,15000);
	
	menu(L,C,root);
}
	
int menu(ListaR *L,ListaC *C,struct node* root){
	
	//---------------------------------------MENU--------------------------------------
	char opcion[2];
	
	printf("\n\n--------BIENVENIDO, QUE DESEA HACER?-------- \n\n ELIJA UN NUMERO \n\n");
	
	printf("1. Registro del nino o nina \n");
	printf("2. Modificar informacion del nino o nina \n");
	printf("3. Eliminar registro de nino o nina \n");
	printf("4. Mostrar registros de ninos \n\n");
	
	printf("5. Registro del ayudante de santa\n");
	printf("6. Modificar informacion del ayudante de santa \n");
	printf("7. Eliminar registro de ayudante de santa \n");
	printf("8. Mostrar registros de ayudantes de santa \n\n");
	
	printf("9.  Registro de juguetes\n");
	printf("10. Modificar informacion de juguetes \n");
	printf("11. Eliminar registro de un juguete \n");
	printf("12. Mostrar registros de juguetes \n\n");
	
	printf("13. Registro de comportamientos\n");
	printf("14. Mostrar registros de comportamientos \n\n");
	
	
	gets(opcion);	
	
//	--------------------------------------Agregar o registrar nino--------------------------------------
	if (strcmp(opcion,"1")==0){
		
	  int identificacion;
	  char nombre[50];
	  char N_usuario[50];
	  char lugar[50];
	  char correo[50];
	  char fecha_nacimiento[15];
	  int edad;
	  char necesidades_especiales[100];
		
            printf("Digite el nombre completo del niño o niña \n\n");
            gets(nombre);
		    
            printf("Digite la identificacion de %s \n\n",nombre);
            scanf("%d",&identificacion);
		    getchar(); //borrar basura
			
			if (repetir_nino(L,identificacion) == -1)
            	{
				printf("\nEste numero de identificacion ya pertenece a un nino, vuelva a intentar el proceso\n");
				return menu(L,C,root);
				}    
		
		    
            printf("Digite nombre de usuario de %s \n\n",nombre);
            gets(N_usuario);
            printf("Digite lugar de procedencia de de %s \n\n",nombre);  //ACA HAY QUE METER RESTRICCION DE QUE ESTE REGISTRADO EN EL CATALOGO
            gets(lugar);
            printf("Digite el correo de %s \n\n",nombre);
            gets(correo);
            printf("Digite la fecha de nacimiento de %s   --FORMATO 04/01/2021-- \n\n",nombre);
            gets(fecha_nacimiento);
            printf("Digite la edad de %s \n\n",nombre);
            scanf("%d",&edad);
		    getchar(); //borrar basura
		    printf("Digite las necesidades especiales del nino o nina \n\n",nombre);
            gets(necesidades_especiales);
            
            insertarNino(L,identificacion,nombre,N_usuario,lugar,correo,fecha_nacimiento,edad,necesidades_especiales);
            
           	mostrarListaIzqDer(L);
           	return menu(L,C,root);
        }
//	--------------------------------------Modificar informacion del nino--------------------------------------      
       if (strcmp(opcion,"2")==0){
       	int identificacion, opcion;
		
		printf("\nQue numero de identificador tiene el nino que desea modificar \n\n");
 			scanf("%d",&identificacion);
		    getchar(); //borrar basura
		    
		printf("\nQue informacion desea modificar del nino o nina. Elija un numero \n\n");
		printf(" 1. Lugar de procedencia \n 2. Necesidades Especiales \n 3. Nombre de usuario \n\n");
         	scanf("%d",&opcion);
		    getchar(); //borrar basura;
            
        	ModificarNino(L,identificacion,opcion);
        	return menu(L,C,root);
    }
//	--------------------------------------Eliminar registro del nino--------------------------------------    
    if (strcmp(opcion,"3")==0){
    	int identificacion;
		
		printf("\nQue numero de identificador tiene el nino que desea eliminar \n\n");
 			scanf("%d",&identificacion);
		    getchar(); //borrar basura   
            eliminarNino(L,identificacion);
        	return menu(L,C,root);

    }
 //	--------------------------------------Mostrar lista registro del nino-------------------------------------   
    if (strcmp(opcion,"4")==0){
		 mostrarListaIzqDer(L);
		 return menu(L,C,root);
    }

//                             ACA VA LO DE AYUDANTE DE SANTA
//                             ACA VA LO DE AYUDANTE DE SANTA
//                             ACA VA LO DE AYUDANTE DE SANTA


//--------------------------------------Agregar juguetes al arbol-------------------------------------   
	if (strcmp(opcion,"9")==0){
		
		int codigo;
    	char nombreJ[50];
    	char descripcion[100];
    	char categoria[100];
    	int rangoI;
    	int rangoF;
    	int costo_total;
    	
    	printf("Digite el nombre del juguete a registrar \n\n");
            gets(nombreJ);
        printf("Digite el codigo del juguete a registrar \n\n");
            scanf("%d",&codigo);
		    getchar(); //borrar basura
        printf("Digite la descripcion del juguete a registrar \n\n");
            gets(descripcion);
        printf("Digite la categoria del juguete (DEPORTE, AGUA, MESA...) \n\n");
            gets(categoria);
		    
        printf("Digite la edad minima para utilizar  %s \n\n",nombreJ);
            scanf("%d",&rangoI);
		    getchar(); //borrar basura
		printf("Digite la edad maxima para utilizar  %s \n\n",nombreJ);
            scanf("%d",&rangoF);
		    getchar(); //borrar basura
		printf("Digite el costo total de  %s \n\n",nombreJ);
            scanf("%d",&costo_total);
		    getchar(); //borrar basura
		    
		root = insert(root,nombreJ,codigo, descripcion,categoria,rangoI,rangoF,costo_total); 
		printf("\nLISTA DE JUGUETES\n");
 		printf("____________________________________________________________________________\n");
		inorder(root);
		printf("\n____________________________________________________________________________\n");
		 return menu(L,C,root);
    }

//	--------------------------------------Modificar juguetes arbol--------------------------------------      
       if (strcmp(opcion,"10")==0){
       	char opcion[5];
       	char nombre[100];
			root = insert(root,"Barbie",50,"rosada","muneca",3,12,10000);
		printf("\nQue nombre exacto tiene el juguete que desea modificar \n\n");
 			gets(nombre);
		    
		printf("\nQue informacion desea modificar juguete. Elija un numero ");
			printf("\n\n-------------DATOS A MODIFICAR---------------");
			printf("\n1.Descripcion");
			printf("\n2.Rango de edad recomendado");
			printf("\n3.Costo de fabricacion");
			printf("\n-----------------------------------------------\n");    

         	gets(opcion);
            
        	modificarJuguete(root,nombre,opcion);
        	return menu(L,C,root);
    }

//	--------------------------------------Eliminar juguetes del arbol--------------------------------------    
    if (strcmp(opcion,"11")==0){
    	char nombre[50];
		
		printf("\nQue nombre exacto tiene el nino que desea eliminar \n\n");
 			gets(nombre);  
            root = deleteNode(root, nombre);
            printf("\n---JUGUETE ELIMINADO---\n");
        	return menu(L,C,root);

    }
 //--------------------------------------Mostrar lista de juguetes------------------------------------- 	
  	if (strcmp(opcion,"12")==0){
       	printf("---------LISTA DE JUGUETES--------\n");
		inorder(root);
		printf("\n----------------------------------\n");
        	return menu(L,C,root);

    }

	//--------------------------------------Agregar comportamiento del nino------------------------------------- 

  
  if (strcmp(opcion,"13")==0){
		
	  int IDnino;
	  char nombrePadre[50];
	  char nombreMadre[50];
	  char Des_comportamiento[100];
	  char fecha_Registro[15];
	  char comportamiento[15];
	  int com_opcion;
    	
    	printf("Digite el identificador del nino para registrar su comportamiento \n\n");
            scanf("%d",&IDnino);
		    getchar(); //borrar basura
        printf("Digite el nombre del padre del nino \n\n");
            gets(nombrePadre);
        printf("Digite el nombre de la madre del nino \n\n");
            gets(nombreMadre);
        printf("Digite una descripcion del comportamiento del nino \n\n");
            gets(Des_comportamiento);
        printf("Digite la fecha de registro del comportamiento   --FORMATO 04/01/2021-- \n\n");
            gets(fecha_Registro);
        printf("Elija la clasificacion del comportamiento \n1. BUENO \n2. MALO) \n\n");
    			scanf("%d",&com_opcion);
		    	getchar(); //borrar basura
    			if (com_opcion== 1){
    			strcpy(comportamiento,"BUENO");
    			//aumentar contador
    			}
    			else if (com_opcion== 2){
    			strcpy(comportamiento,"MALO");
    			//aumentar contador
				}
				else{
					printf("opcion no valida\n\n");
				}
            
        insertarNinoC(C,IDnino,nombrePadre,nombreMadre,Des_comportamiento,fecha_Registro,comportamiento);
        mostrarListaComportamiento(C);
  		return menu(L,C,root);
  	}
 //--------------------------------------Mostrar lista comportamiento del nino------------------------------------- 	
  	if (strcmp(opcion,"14")==0){
       mostrarListaComportamiento(C);
        	return menu(L,C,root);

    }

        return 0;
}
