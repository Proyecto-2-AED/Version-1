//------------------------LIBRERIAS-------------------------------
#include <stdio.h> //entrada y salida de datos
#include <stdlib.h> //gestion de memoria
#include <string.h>  //manipulacion de strings


//-----------------------ESTRUCTURAS------------------------------
//---------REGISTRO NIÑ@------------------

typedef struct ListaR ListaR;
typedef struct NodoR NodoR;

struct NodoR
{
  int identificacion;
  char nombre[50];
  char N_usuario[50];
  char lugar[50];
  char correo[50];
  char fecha_nacimiento[15];
  int edad;
  char necesidades_especiales[100];
  
	NodoR *siguiente;
	NodoR *anterior; 
};

struct ListaR
{
	NodoR *inicio;
	NodoR *final;
};


//---------REGISTRO AYUDANTE------------------
typedef struct ListaA ListaAyudante;
typedef struct NodoA NodoA;

struct NodoA
{
  int identificacion;
  char nombre[50];
  char puesto[50];
  char funcion[50];
  char fecha_inicio[15];
  
	NodoA *siguiente;
	NodoA *anterior; 
};

struct ListaA
{
	NodoA *inicio;
	NodoA *final;
};


//---REGISTRO DE JUGUETES, ARBOL BINARIO-------

typedef struct nodoArbol nodoArbol;

struct nodoArbol{
    int codigo;
    char nombre[50];
    char descripcion[100];
    char categoria[100];
    int rangoI;
    int rangoF;
    int costo_total;
    
  struct _nodo *der;
  struct _nodo *izq;
};

//Definicion de raiz de arbol
nodoArbol *raiz=NULL;

//---------REGISTRO DE COMPORTAMIENTO------------------

typedef struct ListaC ListaC;
typedef struct NodoC NodoC;

struct NodoC
{
  int IDnino;
  char nombrePadre[50];
  char nombreMadre[50];
  char Des_comportamiento[100];
  char fecha_Registro[15];
  char comportamiento[15];
  
	NodoC *siguiente;
	NodoC *anterior; 
};

struct ListaC
{
	NodoR *inicio;
	NodoR *final;
};

//                                       TODO SOBRE REGISTRO DE NIN@S
//-----------------------------------------------------------------------------------------------------------------

//CREACION DE LA LISTA DOBLE PARA REGISTRO DEL NIN@

ListaR *listaNueva(void)
{
	ListaR *L;
	L = (ListaR *) malloc(sizeof(ListaR));
	L->inicio = NULL;
	L->final = NULL;
	return L;
}

//CREACION DEL NODO PARA LISTA DOBLE REGISTRO DEL NIN@
NodoR* crearNodo(int identificacion, char nombre[],char N_usuario[], char lugar[], char correo[], char fecha_nacimiento[],int edad,char necesidades_especiales[])
{
	NodoR *nuevo;
	nuevo = (NodoR *) malloc(sizeof(NodoR));
	nuevo->anterior = NULL;
	nuevo->siguiente = NULL;
	
	nuevo->identificacion = identificacion;	
	strcpy(nuevo->nombre,nombre);
	strcpy(nuevo->N_usuario,N_usuario);
	strcpy(nuevo->lugar,lugar);
	strcpy(nuevo->correo,correo);
	strcpy(nuevo->fecha_nacimiento,fecha_nacimiento);
	nuevo->edad = edad;	
	strcpy(nuevo->necesidades_especiales,necesidades_especiales);
	
	return nuevo;
}

//INSERTAR DATOS EN LA LISTA DOBLE REGISTRO DEL NIN@

void insertarNino(ListaR *L, int identificacion, char nombre[],char N_usuario[], char lugar[], char correo[], char fecha_nacimiento[],int edad,char necesidades_especiales[])
{
	if(L->inicio == NULL) //Valida si la lista est? vac?a
	{
		//Inserta al inicio de la lista
		L->inicio = crearNodo(identificacion,nombre,N_usuario,lugar,correo,fecha_nacimiento,edad,necesidades_especiales);
		L->final = L->inicio;
		return;
	}
	
	//Inserta el dato al final de la lista, no necesita un ciclo porque tiene el puntero final
	L->final->siguiente = crearNodo(identificacion,nombre,N_usuario,lugar,correo,fecha_nacimiento,edad,necesidades_especiales);
	L->final->siguiente->anterior = L->final;
	L->final = L->final->siguiente;
}


//MOSTRAR LISTA DOBLE REGISTRO DEL NIN@
void mostrarListaIzqDer(const ListaR *L)
{
	NodoR *i;
	printf("____________________________________________________________________________\n");
	printf("LISTA DE REGISTROS DE NINOS Y NINAS: \n\n");
	for(i = L->inicio; i!= NULL; i = i->siguiente){
	
		printf("IDENTIFICACION: %d \n", i->identificacion);
		printf("NOMBRE: %s \n", i->nombre);
		printf("NOMBRE USUARIO: %s \n", i->N_usuario);
		printf("LUGAR DE RESIDENCIA: %s \n", i->lugar);
		printf("CORREO: %s \n", i->correo);
		printf("FECHA DE NACIMIENTO: %s \n", i->fecha_nacimiento);
		printf("EDAD: %d \n", i->edad);
		printf("NECESIDADES ESPECIALES: %s \n\n\n", i->necesidades_especiales);
		}
	printf("____________________________________________________________________________\n");
	printf("\n");
}


//ELIMINAR NIN@ DE LA LISTA DOBLE 

void eliminarNino(ListaR *L, int identificacion)
{
	NodoR *aux = L->inicio;
	
	//Valida si la lista esta vacia
	if(L->inicio == NULL)
	{
		printf("La lista esta vacia...\n");		
	}
	else
	{
//Si el nodo a eliminar esta al inicio de la lista
		if(L->inicio->identificacion == identificacion)
		{
		aux = L->inicio;
		printf("El nino con identificacion %d ha sido eliminado \n", aux->identificacion);
		
		if(L->inicio == L->final) //Verifica si la lista solo ten?a un nodo para actualizar el puntero final
		{
			L->inicio = NULL;
			L->final = NULL;
		}
		else{
			L->inicio = L->inicio->siguiente;
			L->inicio->anterior = NULL;	
		}		
		free(aux);

		}
	//-----------------------------	
		else 
		{
			while(aux != NULL)
			{
				if(aux->identificacion == identificacion){
					aux->anterior->siguiente = aux->siguiente;
					if(aux != L->final)
						aux->siguiente->anterior = aux->anterior;
					else if(aux == L->final) //Valida si era el ultimo nodo de la lista para actualizar el puntero final
						L->final = L->final->anterior;					
					break;
				}
				aux = aux->siguiente;					
			}
			
		
		if(aux != NULL)
		{
			printf("El nino con identificacion %d ha sido eliminado \n", aux->identificacion);
			free(aux);
		}
	}
}
}

//VERIFICAR NINO REPETIDO Y EXISTE

int repetir_nino(ListaR *L, int identificacion)
{
	NodoR *nAux = L->inicio;
	
	while(nAux != NULL)
	{
		if(nAux->identificacion == identificacion)
			return -1;
		nAux = nAux->siguiente;		
	}
	
}




// MODIFICAR INFORMACION DE LISTA DOBLE REGISTRO NINO

void ModificarNino(ListaR *L, int identificador, int opcion){

    NodoR *aux = L->inicio;
    int ok = 0;
	int resultado;
    char nuevolugar[50],nueva_nece[100],nuevo_usuario[50];

    while(aux != NULL && !ok)
        {   
            if(aux->identificacion == identificador)
            {ok = 1;
			break;
			}
            else
            {aux=aux->siguiente;}
        }    

    if(ok)
    {
        printf("\nEL NIÑ@ CON IDENTIFICADOR %d SI ESTA REGISTRADO \n\n", identificador);
        if (opcion == 1){
            printf("Digite el nuevo lugar de residencia \n\n");
            gets(nuevolugar);
            strcpy(aux->lugar,nuevolugar);
            
            printf("EL CAMBIO SE REALIZO CON EXITO \n\n");
            printf("NOMBRE:%s \n",aux->nombre);
            printf("IDENTIFICADOR :%d \n",aux->identificacion);
			printf("NUEVO LUGAR DE RESIDENCIA :%s \n",aux->	lugar);
			}
			
		else if (opcion == 2){
            printf("Digite las nuevas necesidades del niño o niña \n\n");
            gets(nueva_nece);
            strcpy(aux->necesidades_especiales,nueva_nece);
            printf("EL CAMBIO SE REALIZO CON EXITO \n\n");
            printf("NOMBRE:%s \n",aux->nombre);
            printf("IDENTIFICADOR :%d \n",aux->identificacion);
			printf("NUEVAS NECESIDADES ESPECIALES :%s \n",aux->necesidades_especiales);
			}
			
		else if (opcion == 3){
            printf("Digite el nuevo nombre de usuario \n\n");
            gets(nuevo_usuario);
            strcpy(aux->N_usuario,nuevo_usuario);
            printf("EL CAMBIO SE REALIZO CON EXITO \n\n");
			printf("NOMBRE:%s \n",aux->nombre);
            printf("IDENTIFICADOR :%d \n",aux->identificacion);
			printf("NUEVO NOMBRE DE USUARIO :%s \n",aux->N_usuario);
			}
   		 
   }
   
   else
   		 {printf("\nEL NIÑ@ CON IDENTIFICADOR %s NO ESTA REGISTRADO \n\n", identificador);}

}
//                                       TODO SOBRE COMPORTAMIENTO DEL NINO
//-----------------------------------------------------------------------------------------------------------------

//CREACION DE LA LISTA DOBLE PARA COMPORTAMIENTO

ListaC *listaNuevaComportamiento(void)
{
	ListaC *C;
	C = (ListaC *) malloc(sizeof(ListaC));
	C->inicio = NULL;
	C->final = NULL;
	return C;
}


//CREACION DEL NODO PARA LISTA DOBLE COMPORTAMIENTO
NodoC* crearNodoComportamiento( int IDnino,char nombrePadre[],char nombreMadre[],char Des_comportamiento[],char fecha_Registro[],char comportamiento[])
{
	NodoC *nuevo;
	nuevo = (NodoC *) malloc(sizeof(NodoC));
	nuevo->anterior = NULL;
	nuevo->siguiente = NULL;
	
	nuevo->IDnino = IDnino;	
	strcpy(nuevo->nombrePadre,nombrePadre);
	strcpy(nuevo->nombreMadre,nombreMadre);
	strcpy(nuevo->Des_comportamiento,Des_comportamiento);
	strcpy(nuevo->fecha_Registro,fecha_Registro);
	strcpy(nuevo->comportamiento,comportamiento);
	
	return nuevo;
}



//INSERTAR DATOS EN LA LISTA DOBLE COMPORTAMIENTO

void insertarNinoC(ListaC *C, int IDnino,char nombrePadre[],char nombreMadre[],char Des_comportamiento[],char fecha_Registro[],char comportamiento[])
{
	if(C->inicio == NULL) //Valida si la lista est? vac?a
	{
		//Inserta al inicio de la lista
		C->inicio = crearNodoComportamiento(IDnino,nombrePadre,nombreMadre,Des_comportamiento,fecha_Registro,comportamiento);
		C->final = C->inicio;
		return;
	}
	
	//Inserta el dato al final de la lista, no necesita un ciclo porque tiene el puntero final
	C->final->siguiente = crearNodoComportamiento(IDnino,nombrePadre,nombreMadre,Des_comportamiento,fecha_Registro,comportamiento);
	C->final->siguiente->anterior = C->final;
	C->final = C->final->siguiente;
}


//MOSTRAR LISTA DOBLE REGISTRO DEL NIN@
void mostrarListaComportamiento(const ListaC *C)
{
	NodoC *i;
	printf("____________________________________________________________________________\n");
	printf("LISTA DE COMPORTAMIENTOS DE NINOS Y NINAS: \n\n");
	for(i = C->inicio; i!= NULL; i = i->siguiente){
	
		printf("IDENTIFICACION DEL NINO: %d \n", i->IDnino);
		printf("NOMBRE DEL PADRE: %s \n", i->nombrePadre);
		printf("NOMBRE DE LA MADRE: %s \n", i->nombreMadre);
		printf("FECHA DE REGISTRO: %s \n", i->fecha_Registro);
		printf("DESCRIPCION DEL COMPORTAMIENTO: %s \n", i->Des_comportamiento);
		printf("COMPORTAMIENTO: %s \n\n\n", i->comportamiento);
		}
	printf("____________________________________________________________________________\n");
	printf("\n");
}



//                                       TODO SOBRE REGISTRO DE JUGUETES
//-----------------------------------------------------------------------------------------------------------------
/*
void insertar(char nombrex)
{
    nodoArbol *nuevo;
    nuevo = malloc(sizeof(struct nodoArbol));
    strcpy(nuevo->nombre,nombrex);
    nuevo->izq = NULL;
    nuevo->der = NULL;
    if (raiz == NULL)
        raiz = nuevo;
    else
    {
        nodoArbol *anterior, *aux;
        anterior = NULL;
        aux = raiz;
        while (aux != NULL)
        {
            anterior = aux;
            if (strcmp(nombrex,aux->nombre) <0)
                aux = aux->izq;
            else
                aux = aux->der;
        }
        if (strcmp(nombrex,anterior->nombre)<0)
            anterior->izq = nuevo;
        else
            anterior->der = nuevo;
    }
}

void imprimirPreorden(nodoArbol *recorrer)
{
    if (recorrer != NULL)
    {
        printf("%i --",recorrer->codigo);
        imprimirPreorden(recorrer->izq);
        imprimirPreorden(recorrer->der);
    }
}
*/
//                                       PRINCIPAL
//-----------------------------------------------------------------------------------------------------------------

int main(void)
{
	ListaR *L;
	L = listaNueva();
	
	ListaC *C;
	C = listaNueva();
	
	insertarNinoC(C,504390817,"Vicente","Meybel","Lavo los platos", "07/01/2021","bueno");
	mostrarListaComportamiento(C);
	
//	insertarJuguetes(12321);
//	menu(L);
	
/*	insertarNino(L,504390817,"Paola Lopez Mendez","Farolayn","Hojancha","farolayn@gmail.com","01/09/2001",19,"Alergica al polvo");
	insertarNino(L,502598537,"Mary Cruz Lopez","Crusi","Hojancha","crmendez05@gmail.com","27/05/1998",22,"Alergica al agua");
	mostrarListaIzqDer(L);
	//eliminarNino(L,502598537);
	
	

	
	eliminarNino(L,504390817);
	mostrarListaIzqDer(L);

	

//	liberarLista(L);
*/
}
	
int menu(ListaR *L){
	
	//---------------------------------------MENU--------------------------------------
	char opcion[2];
	
	printf("\n\n--------BIENVENIDO, QUE DESEA HACER?-------- \n\n ELIJA UN NUMERO \n\n");
	
	printf("1. Registro del nino o nina \n");
	printf("2. Modificar informacion del nino o nina \n");
	printf("3. Eliminar registro de niño o niña \n");
	gets(opcion);	
	
//	--------------------------------------Agregar o registrar nino--------------------------------------
	if (strcmp(opcion,"1")==0){
		
	  int identificacion;
	  char nombre[50];
	  char N_usuario[50];
	  char lugar[50];
	  char correo[50];
	  char fecha_nacimiento[15];
	  int edad;
	  char necesidades_especiales[100];
		
            printf("Digite el nombre completo del niño o niña \n\n");
            gets(nombre);
		    
            printf("Digite la identificacion de %s \n\n",nombre);
            scanf("%d",&identificacion);
		    getchar(); //borrar basura
			
			if (repetir_nino(L,identificacion) == -1)
            	{
				printf("\nEste numero de identificacion ya pertenece a un nino, vuelva a intentar el proceso\n");
				return menu(L);
				}    
		
		    
            printf("Digite nombre de usuario de %s \n\n",nombre);
            gets(N_usuario);
            printf("Digite lugar de procedencia de de %s \n\n",nombre);  //ACA HAY QUE METER RESTRICCION DE QUE ESTE REGISTRADO EN EL CATALOGO
            gets(lugar);
            printf("Digite el correo de %s \n\n",nombre);
            gets(correo);
            printf("Digite la fecha de nacimiento de %s   --FORMATO 04/01/2021-- \n\n",nombre);
            gets(fecha_nacimiento);
            printf("Digite la edad de %s \n\n",nombre);
            scanf("%d",&edad);
		    getchar(); //borrar basura
		    printf("Digite las necesidades especiales del nino o nina \n\n",nombre);
            gets(necesidades_especiales);
            
            insertarNino(L,identificacion,nombre,N_usuario,lugar,correo,fecha_nacimiento,edad,necesidades_especiales);
            
           	mostrarListaIzqDer(L);
           	return menu(L);
        }
//	--------------------------------------Modificar informacion del nino--------------------------------------      
       if (strcmp(opcion,"2")==0){
       	int identificacion, opcion;
		
		printf("\nQue numero de identificador tiene el nino que desea modificar \n\n");
 			scanf("%d",&identificacion);
		    getchar(); //borrar basura
		    
		printf("\nQue informacion desea modificar del nino o nina. Elija un numero \n\n");
		printf(" 1. Lugar de procedencia \n 2. Necesidades Especiales \n 3. Nombre de usuario \n\n");
         	scanf("%d",&opcion);
		    getchar(); //borrar basura;
            
        	ModificarNino(L,identificacion,opcion);

    }
//	--------------------------------------Eliminar registro del nino--------------------------------------    
    if (strcmp(opcion,"3")==0){
    	int identificacion;
		
		printf("\nQue numero de identificador tiene el nino que desea eliminar \n\n");
 			scanf("%d",&identificacion);
		    getchar(); //borrar basura   
            eliminarNino(L,identificacion);

    }
        return 0;
}
        					
